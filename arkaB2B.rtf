{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\info
{\author Perry Manson}
{\*\company TIA.SA.}}\paperw11905\paperh16837\margl1134\margr1134\margb1134\margt1134\vieww23720\viewh16580\viewkind1\viewscale200
\deftab720
\pard\pardeftab720\ri-1\partightenfactor0

\f0\fs22 \cf0 Arkanoid, Back to Basic!
\f1 \

\f0 por  ignacobo
\f1 \
\
\

\f0 1- Instrucciones
\f1 \

\f0 2- Datos t\'e9cnicos 
\f1 \

\f0 3- Contenido del Fichero .TAP\
4- Versiones
\f1 \
\

\f0 1- INSTRUCCIONES
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 Tributo al cl\'e1sico juego Arkanoid Revenge of Doh. Est\'e1 realizado en BASIC puro para ZXSpectrum 48K, presentado al concurso de Radastan Bytemaniacos de Febrero 2022.
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 Misi\'f3n
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 Tienes que guiar la nave en forma de pala a trav\'e9s de 17 fases, tratando de destruir los ladrillos de cada pantalla, utilizando una bola que los golpee rebotando en la pala. Si la bola se va por la l\'ednea inferior perder\'e1s una vida.
\f1 \

\f0 Usa los extremos de la pala para rebotes pronunciados y el centro de la pala para rebote normal.
\f1 \

\f0 Consigue m\'e1s puntos terminando la fase en el menor tiempo posible, y cogiendo PowerUp
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 Tipos de ladrillos
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 Malla de color: B\'e1sico, se destruyen con un solo golpe. Algunos esconden un Power Up que caer\'e1
\f1 \

\f0 Relieve blanco y negro: Estos necesitan dos toques para eliminarlos
\f1 \

\f0 Relieve amarillo y rojo: Ladrillo irrompible. Provocan un gran \'e1ngulo de rebote de la bola
\f1 \

\f0 Malla blanca y negra: Este tipo de ladrillo desaparece despu\'e9s de dos impactos. Al cabo de unos 10 segundos reaparecer\'e1n de nuevo en pantalla
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 Power Up
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 Hay 7 tipos de ayudas, que aparecen tras golpear determinados ladrillos
\f1 \

\f0 GLUE: color azul. La bola se quedara pegada a la pala durante unos segundos, o hasta que pulses Spc.
\f1 \

\f0 WIDE: color rojo. Aumenta el tama\'f1o de la pala, pero acelera la velocidad de la bola
\f1 \

\f0 SHORT: color magenta. Reduce el tama\'f1o de la pala y reduce la velocidad de la bola
\f1 \

\f0 LASER: color verde. Pulsando Spc, la pala disparara un rayo laser que destruye ladrillos
\f1 \

\f0 1 UP: color cyan. Vida extra, hasta un m\'e1ximo de 8
\f1 \

\f0 3BALLS: color amarillo. Maneja 3 bolas a la vez. Puedes perder hasta dos de esas bolas sin que pierdas una vida.
\f1 \

\f0 DRILL: color blanco. La bola atravesara todos los tipos de ladrillos al primer toque y sin rebotar.
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 Men\'fa principal.
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 Podemos elegir el Nivel de dificultad pulsando N. Hay tres distintos, Dif\'edcil, Normal y F\'e1cil. Se diferencian en el ancho de la pala, el numero de vidas inicial y cu\'e1ntos PowerUp se esconden en cada pantalla.
\f1 \
\

\f0 Pulsando A empieza la partida.
\f1 \
\

\f0 Accedes al men\'fa de M\'fasicas con la tecla M, donde podr\'e1s escuchar las melod\'edas y efectos de sonido del juego, con las teclas 1 al 6
\f1 \
\

\f0 Relee las instrucciones apretando I. Recuerda, mueve la pala a la izquierda con O y a la derecha con P.  Suelta la bola pegada o dispara el laser con la tecla Spc.
\f1 \
\

\f0 Para entrar al Editor pulsa E. Podr\'e1s crear tu propio dise\'f1o de pantalla. Mu\'e9vete con OPQA. Para los ofendiditos, tambi\'e9n se permite usar QAOP, aunque va mas lento ;-)
\f1 \

\f0 Cambia el brillo, la tinta y el fondo del ladrillo, con  B, T y F. Selecciona el tipo de ladrillo con L.
\f1 \

\f0 Pulsando Spc pones o quitas el ladrillo.
\f1 \

\f0 Cuando termines tu dise\'f1o podr\'e1s jugarlo pulsando J.
\f1 \
\
\
\

\f0 2- DATOS T\'c9CNICOS 
\f1 \

\f0 Lo m\'e1s destacable del dise\'f1o es el movimiento de la bola de 4 en 4 pixels. Tanto horizontal como verticalmente, la bola se mueve a medio car\'e1cter en velocidad lenta, o a car\'e1cter en velocidad alta. Esto nos permite gran variedad de \'e1ngulos de rebote: 30\'ba, 45\'ba y 60\'ba 
\f1 \

\f0 Para lograrlo, he necesitado nada menos que 9 UDGs para el sprite de la bola:
\f1 \
\

\f0 Tambi\'e9n hay que rese\'f1ar que los pseudo sprites de la bola y de los PowerUp no borran el fondo por el que se desplazan.
\f1 \

\f0 Hay 4 tipos de fondos diferentes, para ello he necesitado 4 bancos de UDGs para simular el efecto de pasar sobre el fondo sin borrarlo.
\f1 \
\

\f0 El juego se mueve a unos 7 FPS, que para un juego en BASIC es un gran reto. Para ara\'f1ar frames en la ejecuci\'f3n he utilizado estas t\'e9cnicas:
\f1 \
\

\f0 *El bucle principal empieza en la primera l\'ednea del c\'f3digo.
\f1 \

\f0 *Todos los PRINT terminan con un ; que hace que no se env\'ede RetornoDeCarro, ahorrando algunos frames.
\f1 \

\f0 *La mayor\'eda de las condiciones de los IFs son Var o NOT Var, para que el interprete tenga que leer menos caracteres.
\f1 \

\f0 *Incluir los c\'f3digos de color dentro de las cadenas a imprimir, ya que INK, PAPER, etc son algo m\'e1s lentos. Las fases est\'e1n almacenadas de esta manera, siendo una cadena larga que adem\'e1s incluye los AT x,y incrustados, de modo que con un solo PRINT se dibuja cada fase.
\f1 \

\f0 *La m\'e1quina de estados del engine tiene unos 24 estados. se puede implementar con unas 6 l\'edneas y 2 prints, pero en cada iteraci\'f3n realiza muchos c\'e1lculos y el print estar\'eda lleno de AND, OR, y otras condiciones que ralentizan mucho. Entonces he desplegado cada uno de los posibles  estados y hay un print para cada estado, sin necesidad de c\'e1lculos redundantes, ganando mucha velocidad, pero a costa de gastar mucha memoria, unas 52 l\'edneas y 40 prints para el mismo engine. En funci\'f3n del desplazamiento a izq o a drcha, arriba o a abajo, si son 4 u 8 pixels y el frame de animaci\'f3n horizontal y el vertical se accede a una tabla de saltos y hace GOTO a esa l\'ednea.
\f1 \

\f0 *Repito mucho c\'f3digo en diferentes l\'edneas, gastando mucha memoria, para evitar saltos GoSub que ahorrar\'edan bytes, a costa de velocidad.
\f1 \

\f0 *Declarar las primeras las variables a las que se acceda con mayor frecuencia.
\f1 \

\f0 *Tras muchas pruebas he comprobado que a partir de la variable numero 13 o 14, la b\'fasqueda de la variable es m\'e1s lento que el acceso a una posici\'f3n de memoria con POKE y PEEK, por lo que he sustituido las variables Byte a partir de la 13 por POKEs. El gran inconveniente de esto es que la casi imposibilita la legibilidad y depuraci\'f3n del c\'f3digo, as\'ed que solo recomiendo hacer esto al final del desarrollo del proyecto. Adem\'e1s, este cambio ocupa mucha m\'e1s memoria.
\f1 \

\f0 *En el bucle principal primero veo si hay que redibujar alg\'fan ladrillo de los que reaparecen, l\'ednea 4
\f1 \

\f0 Despu\'e9s comprobaci\'f3n de tecla izq, drch o disparo, l\'edneas 5,6 y 7
\f1 \

\f0 Maquina de estados desde la l\'ednea 11 a la 81.
\f1 \
\

\f0 *Para el PowerUp de 3 bolas, utilizo DefAdd para hacer una copia r\'e1pida de las 11 variables necesarias para mover la bola, actualizarlas, guardarlas en memoria, y en cada iteraci\'f3n, leer las otras 11 a la zona de variables del Basic activas, volver al engine, y etc etc. Esto es mucho m\'e1s r\'e1pido que tener una matriz Dim(11,3) para las 11 variables de cada bola.
\f1 \

\f0 A partir de la version 1.2 cambio el dise\'f1o de este PowerUp 3bolas, ya no uso DefAdd, sino 3 estructuras de zona de variables diferentes, cambiando de unas a otras pokeando VARS. Aumento de velocidad de un 40%!!!
\f1 \
\
\
\

\f0 3-CONTENIDO DEL FICHERO ARKAB2B.TAP\

\f1 \
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 arkaB2Bloa.bas 	\
\pard\tx3\pardeftab720\fi720\ri-1\qj\partightenfactor0
\cf0 	Cargador de la pantalla y del programa principal\
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0
\cf0 arkaB2B.bas
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		C\'f3digo BASIC con la l\'f3gica del juego, y desde el que se cargan los ficheros auxiliares\

\f1 \
	
\f0 arkaB2Bscr\
		Pantalla de carga, autor Rev_Stuart_Campbell\

\f1 \
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 fase0
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Pantalla con el marco de juego y sin ladrillos
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 fases1a17
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Cadenas de texto con los ladrillos para imprimir cada una de las 7 fases del juego
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 music
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		notas y duraci\'f3n para las melod\'edas y efectos
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 UDGs
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		4 bancos de gr\'e1ficos, se diferencian entre si por el dise\'f1o del fondo por el que pasa la bola. En cada banco hay 9 UDG dedicados al sprite de la bola desplazado 4pixels en cada direcci\'f3n, para simular el movimiento suave de 4pixels
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 gotoQ
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Tabla de saltos GoTo para las colisiones con los ladrillos cuando coges el PowerUp Drill
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 tablas
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Conjunto de 7 tablas unidas en un solo fichero:
\f1 \
\pard\pardeftab720\li720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 gotoP: tabla de saltos GoTo para las colisiones con ladrillos
\f1 \
\pard\pardeftab720\li1440\ri-1\qj\partightenfactor0

\f0 \cf0 defadd: declaraci\'f3n estructura defadd para la copia r\'e1pida de datos
\f1 \
\pard\pardeftab720\li720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 R(32): manera r\'e1pida de ver si un n\'famero es par o impar
\f1 \

\f0 K(17): datos para dibujar el rayo laser con Draw
\f1 \

\f0 Hpow(22): animaci\'f3n del PowerUp mientras cae
\f1 \

\f0 laser: m\'e1s datos para dibujar el rayo laser con Draw
\f1 \

\f0 rnd(Pow8): para seleccionar qu\'e9 tipo de PowerUp va a salir
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 backgr
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Array de cadena de caracteres, guarda el dise\'f1o de los ladrillos por los que va pasando un PowerUp mientras cae, para poder restaurar su valor despu\'e9s, y que el Pow no deje rastro
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 laserDir
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		Number array, guarda las direcciones de memoria de cada inicio de fila, para ahorrar c\'e1lculos en dibujo del laser
\f1 \
\
\pard\pardeftab720\fi720\ri-1\qj\partightenfactor0

\f0 \cf0 arkaDATA.bas
\f1 \
\pard\pardeftab720\ri-1\qj\partightenfactor0

\f0 \cf0 		C\'f3digo BASIC utilizado para generar los ficheros anteriores. Es necesario hacerlo en archivo .bas separado del principal para ahorrar muuuchos bytes y velocidad de carga de los datos en memoria
\f1 \
\
\
\pard\pardeftab720\ri-1\partightenfactor0

\f0 \cf0 1- VERSIONES\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 	\
\pard\pardeftab720\ri-1\partightenfactor0
\cf0 	1.3 	*Pantalla de carga y car\'e1tula, cortes\'eda de Rev_Stuart_Campbell\
\
 	1.2 	*Arreglado bug de la fase 4, que en determinadas ocasiones no pasaba a la siguiente fase a pesar de no quedar ladrillos\
		* Mejora de la velocidad del Pow 3bolas en un 40%! usando varias direcciones de la variable del sistema VARS\
		* Mejora de la velocidad del Pow Laser cambiando la variable del sistema PROG\
		* Los ladrillos que reaparecen ahora suman puntos\
\
	1.1	*Corregido el bug de la linea 228 que te sacaba al Basic\
	\
	1.0	*Version inicial\
\
Bugs conocidos:\
	\
	Si la bola rebota en el Pow blanco Drill se crea un ladrillo de los que reaparecen\
	El l\'e1ser no alcanza a los ladrillos de la \'faltima columna\
\
}